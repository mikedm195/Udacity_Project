pipeline {
    agent any
    environment 
    {
        PROJECT = '318180760014.dkr.ecr.us-west-2.amazonaws.com/udacity-project'
        ECRURL = 'https://318180760014.dkr.ecr.us-west-2.amazonaws.com'
        ECRCRED = 'ecr:us-west-2:ecr_credentials'
    }
    stages {
        stage('Build preparations') {
            steps {
                script {
                    gitCommitHash = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    shortCommitHash = gitCommitHash.take(7)
                    VERSION = shortCommitHash
                    currentBuild.displayName = "#${BUILD_ID}-${VERSION}"
                    env.IMAGE = "$PROJECT:$VERSION"
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    dir("app") {
                        sh '''
                            pwd
                            echo "Building docker image"
                        '''
                        docker.build("$IMAGE")
                    }
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    dir("app") {
                        sh '''
                            echo "Testing image"
                            IMAGE=$IMAGE make test
                        '''
                    }
                }
            }
        }
        stage('Lint') {
            steps {
                script {
                    dir("app") {
                        sh '''
                            echo "Check linting"
                            IMAGE=$IMAGE make lint
                        '''
                    }
                }
            }
        }
        stage('Push') {
            steps {
                script {
                    dir("app") {
                        sh '''
                            echo "Pushing docker image"
                        '''
                        docker.withRegistry("$ECRURL", "$ECRCRED") {
                            docker.image("$IMAGE").push()
                        }
                    }
                }
            }
        }
        stage('Deploy into kubernetes') {
            steps {
                ansiblePlaybook('../kubernetes_cluster/ansible/update_fibonacci_deploy.yml') {
                    inventoryPath('../kubernetes_cluster/ansible/hosts')
                    credentialsId('my_secret_key')
                    becomeUser("ubuntu")
                    extraVars {
                        extraVar("version", "$VERSION", false)
                    }
                }
            }
        }
    }
}
